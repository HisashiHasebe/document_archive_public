"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[95744],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,f=d["".concat(l,".").concat(u)]||d[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},h),{},{components:n})):r.createElement(f,i({ref:t},h))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={date:new Date("2022-04-08T00:00:00.000Z"),title:"What is the Backend to Frontend Pattern?",description:"A description of the backend for frontend microservices pattern",slug:"what-is-the-backend-to-frontend-design-pattern",authors:"diverta",hide_table_of_contents:!1},i=void 0,s={permalink:"/blog/what-is-the-backend-to-frontend-design-pattern",source:"@site/blog/what-is-the-backend-to-frontend-design-pattern.md",title:"What is the Backend to Frontend Pattern?",description:"A description of the backend for frontend microservices pattern",date:"2022-04-08T00:00:00.000Z",formattedDate:"April 8, 2022",tags:[],readingTime:2.35,hasTruncateMarker:!0,authors:[{name:"Diverta",title:"Creator of Kuroco service",url:"https://www.diverta.co.jp",imageURL:"https://github.com/diverta.png",key:"diverta"}],frontMatter:{date:"2022-04-08T00:00:00.000Z",title:"What is the Backend to Frontend Pattern?",description:"A description of the backend for frontend microservices pattern",slug:"what-is-the-backend-to-frontend-design-pattern",authors:"diverta",hide_table_of_contents:!1},prevItem:{title:"What Are the Benefits of a Headless CMS?",permalink:"/blog/what-are-the-benefits-of-a-headless-cms"},nextItem:{title:"Why is a Headless CMS Important for Enterprises?",permalink:"/blog/why-is-a-headless-cms-important-for-enterprises"}},l={authorsImageUrls:[void 0]},c=[{value:"Overview",id:"overview",level:2},{value:"Why BFF is Beneficial",id:"why-bff-is-beneficial",level:2},{value:"How the BFF Pattern Fits into Kuroco&#39;s Development Philosophy",id:"how-the-bff-pattern-fits-into-kurocos-development-philosophy",level:3},{value:"Kuroco is the Headless CMS Built with API Management in Mind",id:"kuroco-is-the-headless-cms-built-with-api-management-in-mind",level:2}],h={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A description of the backend for frontend microservices pattern"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Backend for Frontend (BFF) is essentially an orchestration layer in your development stack, which comprises multiple API Gateways for your application. Similar to a ",(0,o.kt)("a",{parentName:"p",href:"/blog/api-gateway-vs-backend-for-frontend"},"single API Gateway"),", this layer handles a lot of the complexity of fetching and handling microservices data, so that it can be more easily, reliably, and securely consumed by the frontend."),(0,o.kt)("p",null,"What makes BFF unique, is that each frontend will have its own dedicated API gateway custom tailoring the data that it receives, instead of having all the frontend channels sharing the same single gateway."),(0,o.kt)("h2",{id:"why-bff-is-beneficial"},"Why BFF is Beneficial"),(0,o.kt)("p",null,"The frontend in modern development increasingly comprises a variety of different devices like web browsers, mobile apps, and other smart devices like televisions, watches, etc.  It is no longer sufficient for your app to only work seamlessly on a web browser - users expect a seamless experience across all their devices."),(0,o.kt)("p",null,"In order for developers, marketers, and content creators to optimize this experience across all the users' touch points, the frontend channels must all be connected properly to the backend."),(0,o.kt)("p",null,"In the past, frontend code was often tightly coupled with the backend, as with traditional monolithic CMS platforms like WordPress and Drupal.  More recently, microservices have come to be widely used.  BFF brings microservices together into a more manageable layer that handles the different data dependencies and requirements in such a way that frontend developers can easily consume the data they need without having to worry about how the API is functioning behind the scenes."),(0,o.kt)("h3",{id:"how-the-bff-pattern-fits-into-kurocos-development-philosophy"},"How the BFF Pattern Fits into Kuroco's Development Philosophy"),(0,o.kt)("p",null,"Like a ",(0,o.kt)("em",{parentName:"p"},"kuroco")," (or \u2018backstage helper\u2019 in traditional Japanese theater, working behind the scenes to ensure the show runs smoothly), the purpose of a BFF is to consolidate all the data sources of an app into a kind of \u2018black box\u2019 approach that makes the API strategy much more manageable.  This is especially true in the case of large enterprises, where many different microservices being consumed by all frontend channels can become unwieldy to work with."),(0,o.kt)("h2",{id:"kuroco-is-the-headless-cms-built-with-api-management-in-mind"},"Kuroco is the Headless CMS Built with API Management in Mind"),(0,o.kt)("p",null,"Kuroco is a feature-rich headless CMS that enables enterprise teams to easily configure and customize API endpoints.  While we offer a single API gateway out-of-the-box, it can be easily customized to function as a BFF.  This enables you to access all your enterprise's data with ease, without having to make complicated, potentially breaking changes to your backend architecture or do expensive rebuilds."),(0,o.kt)("p",null,"Kuroco is the best solution of its type for enterprises looking to decouple their backend and frontend concerns.  If you are interested in learning more about how our solutions can help your business, please ",(0,o.kt)("a",{parentName:"p",href:"https://kuroco.app/docs/about/support/"},"contact us")," and we will be happy to answer any questions you have."))}p.isMDXComponent=!0}}]);