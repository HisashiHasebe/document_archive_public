"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[10809],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var o=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(a),h=n,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return a?o.createElement(f,s(s({ref:t},c),{},{components:a})):o.createElement(f,s({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:n,s[1]=r;for(var p=2;p<i;p++)s[p]=a[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,a)}h.displayName="MDXCreateElement"},20635:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var o=a(87462),n=(a(67294),a(3905));const i={date:new Date("2022-05-05T00:00:00.000Z"),title:"What is a Progressive Web App?",description:"A discussion of Progressive Web Apps, compared with native apps",slug:"what-is-a-progressive-web-app",authors:"diverta",hide_table_of_contents:!1},s=void 0,r={permalink:"/blog/what-is-a-progressive-web-app",source:"@site/blog/what-is-a-progressive-web-app.md",title:"What is a Progressive Web App?",description:"A discussion of Progressive Web Apps, compared with native apps",date:"2022-05-05T00:00:00.000Z",formattedDate:"May 5, 2022",tags:[],readingTime:6.32,hasTruncateMarker:!0,authors:[{name:"Diverta",title:"Creator of Kuroco service",url:"https://www.diverta.co.jp",imageURL:"https://github.com/diverta.png",key:"diverta"}],frontMatter:{date:"2022-05-05T00:00:00.000Z",title:"What is a Progressive Web App?",description:"A discussion of Progressive Web Apps, compared with native apps",slug:"what-is-a-progressive-web-app",authors:"diverta",hide_table_of_contents:!1},prevItem:{title:"API Gateway vs Backend For Frontend",permalink:"/blog/api-gateway-vs-backend-for-frontend"},nextItem:{title:"Differences Between Jamstack and Conventional Websites",permalink:"/blog/differences-between-jamstack-and-conventional-websites"}},l={authorsImageUrls:[void 0]},p=[{value:"What Exactly is a Progressive Web App?",id:"what-exactly-is-a-progressive-web-app",level:2},{value:"Common Features of a PWA",id:"common-features-of-a-pwa",level:2},{value:"Responsive Design",id:"responsive-design",level:3},{value:"Option to Install the PWA",id:"option-to-install-the-pwa",level:3},{value:"Available to Use Offline",id:"available-to-use-offline",level:3},{value:"SEO",id:"seo",level:3},{value:"PWAs vs Native Apps: Key Comparisons",id:"pwas-vs-native-apps-key-comparisons",level:2},{value:"Cost of Development",id:"cost-of-development",level:3},{value:"Security",id:"security",level:3},{value:"Key Requirements for Building PWAs",id:"key-requirements-for-building-pwas",level:2},{value:"Frontend Frameworks",id:"frontend-frameworks",level:3},{value:"HTTPS Protocol",id:"https-protocol",level:3},{value:"Frontend Shell",id:"frontend-shell",level:3},{value:"Service Workers",id:"service-workers",level:3},{value:"Kuroco works Hand-in-Glove with PWAs",id:"kuroco-works-hand-in-glove-with-pwas",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A discussion of Progressive Web Apps, compared with native apps"),(0,n.kt)("p",null,"Modern web development has come a long way since the early days of basic HTML, CSS, and JavaScript sites.  More recently, the focus has shifted away from being exclusively on web browsers to native mobile apps built for iOS and Android devices.  Native apps bring a lot of functionality that traditional websites were not able to offer, such as a more immersive user experience and seamless offline usage."),(0,n.kt)("p",null,'Most large online business now offer customers a native web app experience, for a broad range of activities from online banking, to food delivery and other e-commerce sites, to social media, to government services.  The near ubiquity of such apps has given rise to the expression "I bet there\'s an app for that!".'),(0,n.kt)("p",null,"As the state of web technology has continued to improve over time, the need for web apps that can function in a similar manner to such native apps has increased - finally giving rise to \u201cprogressive web applications\u201d (or PWAs)."),(0,n.kt)("h2",{id:"what-exactly-is-a-progressive-web-app"},"What Exactly is a Progressive Web App?"),(0,n.kt)("p",null,"As mentioned, a PWA is an application built with web technologies stacks, i.e. using HTML, CSS, and JavaScript.  However, these apps contain innovations that enable them to function and feel more like a native app."),(0,n.kt)("p",null,"Some of the major improvements include push notifications and ability to use the apps offline.  PWAs also leverage the power of modern APIs to asynchronously deliver content in real time, without having to constantly reload pages from the web server.  PWA frameworks typically come with a wide range of open-source community plugins and options that make development much easier and faster (not having to be built from scratch).  PWAs are also downloadable, and can be installed on devices much like a native app (albeit with some limitations)."),(0,n.kt)("p",null,"One of the main benefits PWAs is that companies can build a single app that runs on both iOS and Android devices.  While larger companies will still also build native apps (usually with a prompt to download it, targeting new users trying out the web app first), it is possible to maintain just a single codebase and offer a PWA - if the company is smaller and has limited developer resources."),(0,n.kt)("p",null,"Many large companies that offer both native and web apps have still taken the PWA approach for their web offerings, such as Uber, Tiktok, Spotify, and Twitter.  Most of these PWA apps can be installed on the user\u2019s home screen on their device."),(0,n.kt)("h2",{id:"common-features-of-a-pwa"},"Common Features of a PWA"),(0,n.kt)("h3",{id:"responsive-design"},"Responsive Design"),(0,n.kt)("p",null,"Because PWAs are built for web browsers, which include both desktop and mobile browsers, it is crucial that they work well on all device sizes.  This can be achieved either via responsive design principles (i.e. having CSS classes active depending on the media query for the device being used), or by having unique different desktop, tablet, or mobile views that load depending on the device.  Regardless, the web app should work seamlessly with any screen size, and have content display on any view-port size."),(0,n.kt)("h3",{id:"option-to-install-the-pwa"},"Option to Install the PWA"),(0,n.kt)("p",null,"PWAs can be installed to the home screen of the user\u2019s device, giving it a similar look and feel to a native app.  This tends to increase user engagement substantially, compared to forcing users to visit the website directly each time they want to use the app."),(0,n.kt)("h3",{id:"available-to-use-offline"},"Available to Use Offline"),(0,n.kt)("p",null,"A key feature of most PWAs is the ability to cache or store content locally, so that the app will continue to work seamlessly when it is offline.  This is crucial for keeping users engaged and providing a better user experience (similar to native apps).  Examples of offline usage would include the ability to read or edit content posted online, or store media files (like music or videos) on the device to be used even when the app is not connected to the Internet."),(0,n.kt)("h3",{id:"seo"},"SEO"),(0,n.kt)("p",null,"One of the main advantages that PWAs have over native apps is that they can appear directly in online searches.  While native apps can be discovered on landing pages or linked to websites, they typically need to be downloaded from app stores first.  PWAs are still websites, so they are indexed in search engines like Google - having a popular PWA is therefore beneficial from an SEO standpoint."),(0,n.kt)("h2",{id:"pwas-vs-native-apps-key-comparisons"},"PWAs vs Native Apps: Key Comparisons"),(0,n.kt)("h3",{id:"cost-of-development"},"Cost of Development"),(0,n.kt)("p",null,"PWAs are usually substantially cheaper to develop, test, and maintain than native apps.  Native apps require developer teams that specialize in certain languages (for iOS and Android), and in most cases both are required to serve the full market of users."),(0,n.kt)("p",null,"In the case of PWAs, the frontend is nearly always built in JavaScript, often a modern framework like React, Vue, or Angular.  JavaScript developers are generally more versatile (full-stack), and only need to maintain a single codebase for all platforms serviced by the PWA.  There is also less complexity, as it is not necessary to work with iOS or Android SDKs."),(0,n.kt)("p",null,"Overall this will reduce the cost dramatically, making it a much more feasible option for smaller companies or start-ups, before they scale to the point that native apps would be required."),(0,n.kt)("h3",{id:"security"},"Security"),(0,n.kt)("p",null,"While native apps are typically secure due to the infrastructure of the operating systems they are built on, this also requires a lot of measures to be implemented (such as multi-factor authentication)."),(0,n.kt)("p",null,"PWAs are required to run on the HTTPS protocol, which makes them highly secure when communicating from client to server.  However, it is important to note that some modern JavaScript frameworks can allow for vulnerabilities to be built in (like storing vulnerable information in the browser), so steps should be taken to safeguard against this."),(0,n.kt)("h2",{id:"key-requirements-for-building-pwas"},"Key Requirements for Building PWAs"),(0,n.kt)("h3",{id:"frontend-frameworks"},"Frontend Frameworks"),(0,n.kt)("p",null,"The most common JavaScript frameworks for building PWAs are React, Vue, and Angular.  In particular, open source frameworks like Next.js (for React) and Nuxt.js (for Vue) have PWA projects built in, which can be installed with a few clicks of a button, and be configured however needed."),(0,n.kt)("h3",{id:"https-protocol"},"HTTPS Protocol"),(0,n.kt)("p",null,"An https connection is necessary to securely transfer data between your PWA\u2019s frontend and the backend server."),(0,n.kt)("h3",{id:"frontend-shell"},"Frontend Shell"),(0,n.kt)("p",null,"This is the initial view the user will see, usually server-side rendered HTML, serving as the skeleton for the app.  This view should load very quickly, and have placeholder or loading view components when necessary to show the user what is happening.  Data is then pulled in via APIs, and populated into the app when loaded."),(0,n.kt)("h3",{id:"service-workers"},"Service Workers"),(0,n.kt)("p",null,"In order for your PWA to continue functioning offline, one of the key technologies required are service workers that run background code and perform advanced caching of data as needed.  The main function of the service workers is to detect changes in the network, fetch data asynchronously and push notifications to the user when their Internet connection is restored.  This provides a much smoother overall user experience."),(0,n.kt)("h2",{id:"kuroco-works-hand-in-glove-with-pwas"},"Kuroco works Hand-in-Glove with PWAs"),(0,n.kt)("p",null,"If you are thinking of building a PWA for your business, it is likely that you will need a content management system (CMS) to manage your content across multiple platforms.  Kuroco is an ideal solution for PWA projects, with API management functionality that allows you to customize endpoints for different frontends."),(0,n.kt)("p",null,"Our solutions work seamlessly with all major frameworks like React/Next and Vue/Nuxt commonly used to build PWAs.  If you would like to learn more about how our products can help your business, please ",(0,n.kt)("a",{parentName:"p",href:"https://kuroco.app/docs/about/support/"},"reach out to us")," and we will be happy to answer any questions!"))}d.isMDXComponent=!0}}]);