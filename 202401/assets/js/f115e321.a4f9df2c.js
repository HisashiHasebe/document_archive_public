"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[53003],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),u=i,f=p["".concat(l,".").concat(u)]||p[u]||h[u]||o;return a?n.createElement(f,r(r({ref:t},d),{},{components:a})):n.createElement(f,r({ref:t},d))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},68194:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const o={date:new Date("2022-05-05T00:00:00.000Z"),title:"API Gateway vs Backend For Frontend",description:"Comparison of similarities and differences of an API gateway vs BFF",slug:"api-gateway-vs-backend-for-frontend",authors:"diverta",hide_table_of_contents:!1},r=void 0,s={permalink:"/blog/api-gateway-vs-backend-for-frontend",source:"@site/blog/api-gateway-vs-backend-for-frontend.md",title:"API Gateway vs Backend For Frontend",description:"Comparison of similarities and differences of an API gateway vs BFF",date:"2022-05-05T00:00:00.000Z",formattedDate:"May 5, 2022",tags:[],readingTime:4.58,hasTruncateMarker:!0,authors:[{name:"Diverta",title:"Creator of Kuroco service",url:"https://www.diverta.co.jp",imageURL:"https://github.com/diverta.png",key:"diverta"}],frontMatter:{date:"2022-05-05T00:00:00.000Z",title:"API Gateway vs Backend For Frontend",description:"Comparison of similarities and differences of an API gateway vs BFF",slug:"api-gateway-vs-backend-for-frontend",authors:"diverta",hide_table_of_contents:!1},prevItem:{title:"Git-based Vs API-centric Headless CMS",permalink:"/blog/git-based-vs-api-centric-headless-cms"},nextItem:{title:"What is a Progressive Web App?",permalink:"/blog/what-is-a-progressive-web-app"}},l={authorsImageUrls:[void 0]},c=[{value:"What is an API Gateway?",id:"what-is-an-api-gateway",level:2},{value:"How is a BFF Different from an API Gateway?",id:"how-is-a-bff-different-from-an-api-gateway",level:2},{value:"Similarities",id:"similarities",level:3},{value:"Differences",id:"differences",level:3},{value:"Should I Use a Standard API Gateway or BFF?",id:"should-i-use-a-standard-api-gateway-or-bff",level:2},{value:"Complex applications with many clients",id:"complex-applications-with-many-clients",level:3},{value:"Simple applications with only one or a few clients",id:"simple-applications-with-only-one-or-a-few-clients",level:3},{value:"Kuroco is the Headless CMS Built with API Management in Mind",id:"kuroco-is-the-headless-cms-built-with-api-management-in-mind",level:2}],d={toc:c},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Comparison of similarities and differences of an API gateway vs BFF"),(0,i.kt)("p",null,"An API gateway is a single point of entry for all clients fetching data from the system, while a ",(0,i.kt)("a",{parentName:"p",href:"/blog/what-is-the-backend-to-frontend-design-pattern/"},"backend-for-frontend (BFF)")," is tailored to a specific frontend - typically with multiple BFFs corresponding to multiple frontends.  However, to better understand the reasoning behind each approach, it is worth considering their differences."),(0,i.kt)("h2",{id:"what-is-an-api-gateway"},"What is an API Gateway?"),(0,i.kt)("p",null,"An API gateway is essentially the filter through which all clients must pass when trying to access resources within the system.  To quote ",(0,i.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/api/what-does-an-api-gateway-do"},"Redhat.com"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u201cAn API gateway acts as a reverse proxy to accept all application programming interface (API) calls, aggregate the various services required to fulfill them, and return the appropriate result.\u201d")),(0,i.kt)("h2",{id:"how-is-a-bff-different-from-an-api-gateway"},"How is a BFF Different from an API Gateway?"),(0,i.kt)("p",null,"A BFF is actually a type of API Gateway.  In fact, both perform the same function, with the main difference being in scope - or how many clients they interact with.  A BFF being tailored to the requirements a specific client, usually a frontend view of an application, while an API gateway genrally functions as a single gateway for the majority (or all) of the clients to access data."),(0,i.kt)("h3",{id:"similarities"},"Similarities"),(0,i.kt)("p",null,"Both architectural patterns serve to achieve the same goal at a high level, i.e. decoupling the backend microservices of a system from the frontend clients.  This makes it much easier for clients and services with different protocols to interact with each other, without having to duplicate a lot of code for each in order to achieve the same result."),(0,i.kt)("p",null,"With an API gateway, each client only needs to know the location of the API gateway itself, instead of all the different microservices within the system.  The API gateway is able to handle functionality like authentication, and bundling of different microservices resources to be served to the client.  A BFF also does this, but on a more granular level."),(0,i.kt)("h3",{id:"differences"},"Differences"),(0,i.kt)("p",null,"As mentioned, the main difference is in how many clients are served.  A standard API gateway handles requests from all the clients interacting with the system, while a BFF only handles a specific client.  An example would be an app with 2 different frontends: "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Desktop browser web client"),(0,i.kt)("li",{parentName:"ol"},"Native mobile client (iOS or Android)")),(0,i.kt)("p",null,"If each of these frontends were given their own dedicated gateway to access resources in the system, i.e. with custom tailored endpoints that would meet their precise needs (as each might require different data depending on the screen size of devices used etc.), then each gateway would be considered a BFF."),(0,i.kt)("h2",{id:"should-i-use-a-standard-api-gateway-or-bff"},"Should I Use a Standard API Gateway or BFF?"),(0,i.kt)("p",null,"There are trade-offs to either approach.  Generally a BFF pattern is ideal, but it is also more complicated to maintain as it requires more granular customization.  A standard API Gateway can also be optimized to function more efficiently on multiple frontends, and essentially 'emulate' a proper BFF architecture in its behavior (with some limitations)."),(0,i.kt)("p",null,"The question largely boils down to a few key factors such as how many clients the application has to interact with, the scale of the application, and the resources the business has to devote to customizing this architecture."),(0,i.kt)("h3",{id:"complex-applications-with-many-clients"},"Complex applications with many clients"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"May need to support different protocols like GraphQL vs REST APIs serving JSON."),(0,i.kt)("li",{parentName:"ul"},"May have dedicated teams working on each client, with different needs."),(0,i.kt)("li",{parentName:"ul"},"May have an equally complex system of microservices, needing to be bundled/aggregated by gateways before being served to clients.")),(0,i.kt)("p",null,"In the above cases, it may be worth investing the required time and resources into building a proper BFF architecture.  This would allow each team that is responsible for a specific frontend to manage their API needs by themselves without having to worry about what other teams are doing.  Having a dedicated BFF for each frontend would also ensure they are able to access data resources in the most efficient manner, which is required for the frontend developers work effectively (and not having to constantly be making requests for potentially breaking changes to the backend team)."),(0,i.kt)("p",null,"Alternatively,"),(0,i.kt)("h3",{id:"simple-applications-with-only-one-or-a-few-clients"},"Simple applications with only one or a few clients"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"May operate with just a single protocol."),(0,i.kt)("li",{parentName:"ul"},"Be managed by a single team."),(0,i.kt)("li",{parentName:"ul"},"Have only a single authentication method for all users."),(0,i.kt)("li",{parentName:"ul"},"Have a relatively simple system of microservices, able to be handled by a single gateway.")),(0,i.kt)("p",null,"In this case, all the API needs of the application can likely be handled by a single API gateway without any issue.  It would be overkill to build out and manage multiple BFF gateways, and frontend teams would be able to access the data they need - perhaps not in the most efficient way possible - but without any issue."),(0,i.kt)("h2",{id:"kuroco-is-the-headless-cms-built-with-api-management-in-mind"},"Kuroco is the Headless CMS Built with API Management in Mind"),(0,i.kt)("p",null,"Kuroco is a feature-rich headless CMS that enables enterprise teams to easily configure and customize API endpoints.  We offer a single API gateway out-of-the-box, which can be easily customized to function similarly to a BFF pattern.  This enables you to access all your enterprise's data with ease, without having to make complicated, potentially breaking changes to your backend architecture or do expensive rebuilds."),(0,i.kt)("p",null,"Kuroco is the best solution of its type for enterprises looking to decouple their backend and frontend concerns.  If you are interested in learning more about how our solutions can help your business, please ",(0,i.kt)("a",{parentName:"p",href:"https://kuroco.app/docs/about/support/"},"contact us")," and we will be happy to answer any questions you have."))}h.isMDXComponent=!0}}]);