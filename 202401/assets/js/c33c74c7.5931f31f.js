"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[90164],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},70229:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={date:new Date("2022-04-08T00:00:00.000Z"),title:"Jamstack for Enterprise",description:"How can the Jamstack be effectively used by enterprises",slug:"jamstack-for-enterprise",authors:"diverta",hide_table_of_contents:!1},s=void 0,o={permalink:"/blog/jamstack-for-enterprise",source:"@site/blog/jamstack-for-enterprise.md",title:"Jamstack for Enterprise",description:"How can the Jamstack be effectively used by enterprises",date:"2022-04-08T00:00:00.000Z",formattedDate:"April 8, 2022",tags:[],readingTime:5.37,hasTruncateMarker:!0,authors:[{name:"Diverta",title:"Creator of Kuroco service",url:"https://www.diverta.co.jp",imageURL:"https://github.com/diverta.png",key:"diverta"}],frontMatter:{date:"2022-04-08T00:00:00.000Z",title:"Jamstack for Enterprise",description:"How can the Jamstack be effectively used by enterprises",slug:"jamstack-for-enterprise",authors:"diverta",hide_table_of_contents:!1},prevItem:{title:"Jamstack and Serverless",permalink:"/blog/jamstack-and-serverless"},nextItem:{title:"Jamstack",permalink:"/blog/jamstack"}},l={authorsImageUrls:[void 0]},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Jamstack Overview",id:"jamstack-overview",level:2},{value:"Jamstack for Enterprises",id:"jamstack-for-enterprises",level:2},{value:"Using the \u2018Microsites\u2019 Pattern",id:"using-the-microsites-pattern",level:2},{value:"Generate Only Necessary Pages at Run-Time",id:"generate-only-necessary-pages-at-run-time",level:3},{value:"Incremental Builds",id:"incremental-builds",level:3},{value:"Is it Difficult to Migrate to Jamstack as an Enterprise?",id:"is-it-difficult-to-migrate-to-jamstack-as-an-enterprise",level:2},{value:"Dynamic Content in Jamstack Pages?",id:"dynamic-content-in-jamstack-pages",level:2},{value:"Targeted and Personalized Content for Users",id:"targeted-and-personalized-content-for-users",level:3},{value:"Main Benefits of Jamstack for Your Enterprise",id:"main-benefits-of-jamstack-for-your-enterprise",level:2},{value:"Kuroco Is Built with Enterprise-Grade Projects in Mind",id:"kuroco-is-built-with-enterprise-grade-projects-in-mind",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"How can the Jamstack be effectively used by enterprises"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Jamstack Overview"),(0,r.kt)("li",{parentName:"ul"},"Jamstack for Enterprises"),(0,r.kt)("li",{parentName:"ul"},"Using the \u2018Microsites\u2019 Pattern"),(0,r.kt)("li",{parentName:"ul"},"Is it Difficult to Migrate to Jamstack as an Enterprise?"),(0,r.kt)("li",{parentName:"ul"},"Main Benefits of Jamstack for Your Enterprise"),(0,r.kt)("li",{parentName:"ul"},"Kuroco Is Built with Enterprise-Grade Projects in Mind")),(0,r.kt)("h2",{id:"jamstack-overview"},"Jamstack Overview"),(0,r.kt)("p",null,"In its inception, the Jamstack was an innovative web stack used mainly by frontend developers to publish their own personal sites or blogs cheaply, while maximizing performance.  The ability to publish static pages, hosted on CDNs, meant that developers could save money on hosting and not have to set up or manage servers."),(0,r.kt)("p",null,"Since that time, the Jamstack has matured into a well-developed ecosystem, used by companies both large and small, with many use cases suitable for large enterprises."),(0,r.kt)("h2",{id:"jamstack-for-enterprises"},"Jamstack for Enterprises"),(0,r.kt)("p",null,"It is commonly assumed that large enterprise applications need to be built atop complex backend systems.  However, as microservices patterns and ",(0,r.kt)("a",{parentName:"p",href:"/blog/serverless"},"serverless architecture")," have become ubiquitous in the industry, frontend solutions have become decoupled and much more flexible to deploy."),(0,r.kt)("p",null,"While Jamstack was originally used primarily by frontend developers to publish static websites and blogs, modern API management and JavaScript libraries make it easy for static frontends to consume and display dynamic data without requiring expensive page reloads on the server side."),(0,r.kt)("p",null,"One of the main challenges with using Jamstack for enterprise sites has been the requirement to run a build command to pre-render all the pages from a JavaScript library like React or Vue, which could comprise many thousands of pages for some larger sites.  This can result in slow and more expensive build times."),(0,r.kt)("p",null,"For this reason, incremental builds have become more popular, along with splitting very large sites into smaller sections, and only publishing updated pages at build time (instead of re-rendering the entire site each time a new page is created, or a small change made to one of the existing pages)."),(0,r.kt)("h2",{id:"using-the-microsites-pattern"},"Using the \u2018Microsites\u2019 Pattern"),(0,r.kt)("p",null,"The easiest way to cut down on build time overhead is to break down your enterprise site into smaller, logical sections, tied back to the site\u2019s route domain using proxies or redirects (ex. for subdomains).  A site will typically be divided into several sections, using a navigation bar for main pages.  Each of these main pages can be treated as a separate microsite, which in turn can be further subdivided into additional microsites as needed."),(0,r.kt)("p",null,"If certain sections are managed by different content creators, they can each publish their contents to their respective microsites, run a build command, and deploy their content without affecting other sections or content managed by other teams."),(0,r.kt)("h3",{id:"generate-only-necessary-pages-at-run-time"},"Generate Only Necessary Pages at Run-Time"),(0,r.kt)("p",null,"It is possible to delay the generation of rarely used pages (ex. pages containing legal content or technical information that are rarely visited) until after the main pages of the site have been generated and deployed to the CDN."),(0,r.kt)("h3",{id:"incremental-builds"},"Incremental Builds"),(0,r.kt)("p",null,"Some modern static site generators (like Gatsby, built with React.js) are able to trigger partial rebuilds that only affect new or altered content added to the site, without having to rebuild the pages that have not been changed.  This can make a huge difference in reducing build time and keeping site availability higher."),(0,r.kt)("h2",{id:"is-it-difficult-to-migrate-to-jamstack-as-an-enterprise"},"Is it Difficult to Migrate to Jamstack as an Enterprise?"),(0,r.kt)("p",null,"Traditionally, when large enterprise platforms want to upgrade their software, this would entail a lot of planning, risk assessment, and development resources to achieve a migration.  In the case of Jamstack, this is really not the case.  The overarching philosophy behind the Jamstack is similar to that of a \u2018headless CMS\u2019 - the frontend and backend concerns are decoupled."),(0,r.kt)("p",null,"Since Jamstack is powered by APIs, there is no real need to adjust your existing backend systems at all.  As long as your existing microservices architecture is able to offer an API (or API Gateway) then you can build standalone Jamstack sites or pages immediately.  This process can be done incrementally - with the goal of eventually replacing your existing frontend - or as one-off projects.  Jamstack is highly flexible."),(0,r.kt)("p",null,"A typical approach would be to roll out a Jamstack microsite for a section of your existing main site, and redirect traffic to it (this is easy to do).  This microsite can be tested and optimized for performance, with minimal disruption, with additional microsites built out over time."),(0,r.kt)("h2",{id:"dynamic-content-in-jamstack-pages"},"Dynamic Content in Jamstack Pages?"),(0,r.kt)("p",null,"A common misconception is that since Jamstack is based on serving up pre-rendered static HTML files, it cannot dynamically display content.  In fact, the \u2018J\u2019 in the Jamstack acronym stands for \u2018JavaScript\u2019 - meaning that these static pages still contain scripts that can fetch and post data."),(0,r.kt)("h3",{id:"targeted-and-personalized-content-for-users"},"Targeted and Personalized Content for Users"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Universal content is available via the standard build process, served up to users on the edge node closest to them on the CDN."),(0,r.kt)("li",{parentName:"ul"},"Localized content can be handled by building local versions of pages and routing them to users based on their geography."),(0,r.kt)("li",{parentName:"ul"},"Targeted and personalized content can be delivered by having user accounts and auth - this typically handled by headless CMS platforms (like Kuroco), which will populate pages with content from APIs.")),(0,r.kt)("h2",{id:"main-benefits-of-jamstack-for-your-enterprise"},"Main Benefits of Jamstack for Your Enterprise"),(0,r.kt)("p",null,"One of the main reasons that Jamstack works well as an enterprise solution is: scalability.  Since cloud-based solutions like CDNs are inexpensive, highly available, secure, and performant, Jamstack assets can be deployed quickly without any need for complicated backend management."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Jamstack offers many security advantages over traditional coupled CMS platforms like WordPress or Drupal.")),(0,r.kt)("p",null,"Jamstack pages are often much more performant than pages built on older stacks (unless properly optimized, which is often not the case).  This is particularly important for audiences consuming your web content on their mobile devices, as slow load times result in a poor user experience, which can greatly increase \u2018bounce rates\u2019, and negatively impact your marketing efforts with your online content."),(0,r.kt)("h2",{id:"kuroco-is-built-with-enterprise-grade-projects-in-mind"},"Kuroco Is Built with Enterprise-Grade Projects in Mind"),(0,r.kt)("p",null,"Kuroco, the enterprise headless CMS, has all the serverless infrastructure your enterprise project would need to be highly scalable, secure, and performant."),(0,r.kt)("p",null,"Kuroco also allows you to ",(0,r.kt)("a",{parentName:"p",href:"/blog/api-management"},"configure your API")," with different paths containing different microservice endpoints for each frontend you have."),(0,r.kt)("p",null,"You can get started today and test it out for free, or feel free to ",(0,r.kt)("a",{parentName:"p",href:"https://kuroco.app/docs/about/support/"},"reach out to our customer support team")," if you have any questions!"))}p.isMDXComponent=!0}}]);