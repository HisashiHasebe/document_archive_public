"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[24339],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(a),g=o,u=d["".concat(l,".").concat(g)]||d[g]||c[g]||r;return a?n.createElement(u,i(i({ref:t},m),{},{components:a})):n.createElement(u,i({ref:t},m))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},60504:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(87462),o=(a(67294),a(3905));const r={title:"Embedding Google Maps on Your Website",description:"This page explains how to embed Google Maps on your own website."},i=void 0,p={unversionedId:"tutorials/how-to-setup-google-maps",id:"tutorials/how-to-setup-google-maps",title:"Embedding Google Maps on Your Website",description:"This page explains how to embed Google Maps on your own website.",source:"@site/docs/tutorials/how-to-setup-google-maps.md",sourceDirName:"tutorials",slug:"/tutorials/how-to-setup-google-maps",permalink:"/docs/tutorials/how-to-setup-google-maps",draft:!1,editUrl:"https://github.com/diverta/kuroco-documents/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/how-to-setup-google-maps.md",tags:[],version:"current",frontMatter:{title:"Embedding Google Maps on Your Website",description:"This page explains how to embed Google Maps on your own website."},sidebar:"documentationSidebar",previous:{title:"Add comments function to content with Kuroco and Nuxt.js",permalink:"/docs/tutorials/integrate-activity-comment"},next:{title:"Setting up Core Web Vitals support with Kuroco",permalink:"/docs/tutorials/core-web-vitals-with-kuroco"}},l={},s=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Setting up Google Maps",id:"setting-up-google-maps",level:2},{value:"Creating a New Project in GCP",id:"creating-a-new-project-in-gcp",level:3},{value:"Enabling APIs",id:"enabling-apis",level:3},{value:"Setting up Allowed Domains",id:"setting-up-allowed-domains",level:3},{value:"Kuroco Settings",id:"kuroco-settings",level:2},{value:"Content Definition Settings",id:"content-definition-settings",level:3},{value:"Creating Endpoints",id:"creating-endpoints",level:3},{value:"Frontend Implementation",id:"frontend-implementation",level:2},{value:"Install npm module &quot;vue2-google-maps&quot;",id:"install-npm-module-vue2-google-maps",level:3},{value:"Add GCP KEY to config",id:"add-gcp-key-to-config",level:3},{value:"Implementation of a page displaying Google Maps",id:"implementation-of-a-page-displaying-google-maps",level:3},{value:"Implementation of a page updating Google Maps contents",id:"implementation-of-a-page-updating-google-maps-contents",level:3}],m={toc:s},d="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page explains how to embed Google Maps on your own website and update the location information from the frontend."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Kuroco provides an extension format for storing location information on Google Maps. If you want to input location information through the Kuroco management screen, you can simply click on the location on the map displayed in the content editing screen of the Kuroco management screen to specify the location. However, when displaying a map on the front end or providing an interface to save specified location information, implementation using an API is necessary. This tutorial explains how to display the Google Maps interface on the frontend and update the location information."),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page assumes that you have already set up a project in Kuroco.",(0,o.kt)("br",{parentName:"p"}),"\n","If you haven't set up a project yet, please refer to the following tutorial.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorials/beginners-guide/"},"Kuroco Beginner's Guide"),"  ")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This tutorial uses Nuxt.js version v2.15.8.")),(0,o.kt)("h2",{id:"setting-up-google-maps"},"Setting up Google Maps"),(0,o.kt)("h3",{id:"creating-a-new-project-in-gcp"},"Creating a New Project in GCP"),(0,o.kt)("p",null,"First, create a new project in the Google Cloud Platform (GCP).",(0,o.kt)("br",{parentName:"p"}),"\n","Log in to the Google Cloud Platform and click on the project dropdown in the header.",(0,o.kt)("br",{parentName:"p"}),"\n",'Click on "NEW PROJECT" in the popup that appears.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/dd45a44793f116a3a8e21accd8b8b556.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/dd45a44793f116a3a8e21accd8b8b556.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'On the new project settings page, enter a project name of your choice and click "Create".'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/e60a2730cc6377ec3a7b496c3ad40885.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/e60a2730cc6377ec3a7b496c3ad40885.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,"A new project has been created."),(0,o.kt)("h3",{id:"enabling-apis"},"Enabling APIs"),(0,o.kt)("p",null,"Next, enable the necessary APIs in the GCP console."),(0,o.kt)("p",null,"First, select the project you created from the project dropdown in the header of the GCP console."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/0425d328581a9e2811e2c6912bcf364f.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/0425d328581a9e2811e2c6912bcf364f.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'Then, select "APIs & Services" - "Enabled APIs $ services" from the sidebar.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/cfad71e29f45e563804d8a9ddb2def78.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/cfad71e29f45e563804d8a9ddb2def78.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'When you select "Library" from the sidebar, the API library page will be displayed.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/71045ced5d9504147bde5ae639beb4c3.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/71045ced5d9504147bde5ae639beb4c3.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'Here, search for "Places API" and "Maps JavaScript API" and enable each API.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/f6e2dcde2af12b58a2b061b85f2ea538.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/f6e2dcde2af12b58a2b061b85f2ea538.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/4794b751dd2dbdb6af5464187176dfda.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/4794b751dd2dbdb6af5464187176dfda.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'Next, generate an API key. Select "Credentials" from the sidebar, and click on "+ Create Credentials".'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/6dfa4cbd5e5edcbdd03675c10f453789.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/6dfa4cbd5e5edcbdd03675c10f453789.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,"Select API key."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/ea4321fe4bdb5cfacb1114e3e26dc47a.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/ea4321fe4bdb5cfacb1114e3e26dc47a.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,"An API key will be generated. Please keep it as you will need it later."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/70ff919652e05cebf4177092d79e6778.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/70ff919652e05cebf4177092d79e6778.png",alt:"Image from Gyazo"})),(0,o.kt)("h3",{id:"setting-up-allowed-domains"},"Setting up Allowed Domains"),(0,o.kt)("p",null,"By registering the domain of your website with the API key, you can control the usage of the API and prevent unauthorized access from other websites."),(0,o.kt)("p",null,'On the credentials page, select "Edit API key" from the button on the right of the API key you created earlier.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/6ba77e95dee8704c218c8cb99a888ee9.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/6ba77e95dee8704c218c8cb99a888ee9.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'Enter a name for the API key and select "Website" from the application restrictions settings.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/74d709519873ae72045e9e9c317ee91c.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/74d709519873ae72045e9e9c317ee91c.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,'Click the "ADD" button, enter the domain of the site you plan to use, and click "DONE".'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/b65695a502bb22e9dc346b56f94274de.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/b65695a502bb22e9dc346b56f94274de.png",alt:"Image from Gyazo"})),(0,o.kt)("h2",{id:"kuroco-settings"},"Kuroco Settings"),(0,o.kt)("h3",{id:"content-definition-settings"},"Content Definition Settings"),(0,o.kt)("p",null,"In the Kuroco content definition, set the following items in any optional section of the extended item."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Item Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Input Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Item Name"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Map (Google Maps)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Identifier"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gmap")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Item Setting"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Map")))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/77b73dc1ee3297c9df3e6e471ec9a725.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/77b73dc1ee3297c9df3e6e471ec9a725.png",alt:"Image from Gyazo"})),(0,o.kt)("h3",{id:"creating-endpoints"},"Creating Endpoints"),(0,o.kt)("p",null,"Create an endpoint for retrieve map location information from Kuroco's content.",(0,o.kt)("br",{parentName:"p"}),"\n","Please enter as follows:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Item Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Input Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Path"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"/rmcs-api/(API ID)/map/details/{topics_id}"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Model"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Content - Topics - details")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"API Request Restriction"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Select the group or member filter that allows viewing)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Cache"),(0,o.kt)("td",{parentName:"tr",align:"left"},"86400")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"topics_group_id"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Content structrue ID of the content to be displayed)")))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/188808271577cd8fd5dc19fa2a43b9ea.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/188808271577cd8fd5dc19fa2a43b9ea.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/3507999f513746c9b540c36801a299c6.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/3507999f513746c9b540c36801a299c6.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,"Create an endpoint for changing the location information of the map.",(0,o.kt)("br",{parentName:"p"}),"\n","Please enter as follows:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Item Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Input Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Path"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"/rmcs-api/(API ID)/map/update/{topics_id}"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Model"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Content - Topics - update")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"API Request Restriction"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Select the group or member filter that allows changes)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"topics_group_id"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(Content structrue ID of the content you want to update)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"use_columns"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"gmap"))))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/d07e14f970fb5e13f919ebdeb619571c.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/d07e14f970fb5e13f919ebdeb619571c.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/9262d8b8947ff187cc2ee14af47b03fb.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/9262d8b8947ff187cc2ee14af47b03fb.png",alt:"Image from Gyazo"})),(0,o.kt)("h2",{id:"frontend-implementation"},"Frontend Implementation"),(0,o.kt)("h3",{id:"install-npm-module-vue2-google-maps"},'Install npm module "vue2-google-maps"'),(0,o.kt)("p",null,'Install the npm module "vue2-google-maps", which provides Vue.js components for Google Maps.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm install vue2-google-maps\n")),(0,o.kt)("h3",{id:"add-gcp-key-to-config"},"Add GCP KEY to config"),(0,o.kt)("p",null,"Add the generated API key to the website's configuration file (usually the config file). This allows the website to use the API.\nIf you are implementing it with Nuxt.js, please add it as follows to .env or similar."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title=".env"',title:'".env"'},"BASE_URL=https://sample-service-site.g.kuroco.app\nGCP_KEY=**************************************\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"When using the contents of the .env file during deployment, you will read and use the information registered in GitHub Secrets using GitHub Actions.\nFor more details, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorials/beginners-guide/#deploy-your-code-1"},"Kuroco Beginners Guide"),".")),(0,o.kt)("p",null,"To read this constant, write following code in ",(0,o.kt)("inlineCode",{parentName:"p"},"nuxt.config.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title="nuxt.config.js"',title:'"nuxt.config.js"'},"export default {\n  env: {\n    GCP_KEY: process.env.GCP_KEY\n  },\n")),(0,o.kt)("p",null,"Add a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"vue2-google-maps.client.js")," to the plugins/ directory and write the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title="/plugins/vue2-google-maps.client.js"',title:'"/plugins/vue2-google-maps.client.js"'},"import Vue from 'vue';\nimport * as VueGoogleMaps from 'vue2-google-maps';\n\nVue.use(VueGoogleMaps, {\n    load: {\n        key: process.env.GCP_KEY,\n        libraries: 'places'\n    }\n});\n")),(0,o.kt)("p",null,"Add the following to the plugins directive in ",(0,o.kt)("inlineCode",{parentName:"p"},"nuxt.config.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title="nuxt.config.js"',title:'"nuxt.config.js"'},"    plugins: [\n        // (omitted)\n        '@/plugins/vue2-google-maps.client'\n    ]\n")),(0,o.kt)("h3",{id:"implementation-of-a-page-displaying-google-maps"},"Implementation of a page displaying Google Maps"),(0,o.kt)("p",null,"Let's display a Google Map on the website.\nUse the ",(0,o.kt)("inlineCode",{parentName:"p"},"<GmapMap>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<GmapMarker>")," components of ",(0,o.kt)("inlineCode",{parentName:"p"},"vue2-google-maps")," and implement as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title="/pages/map/details/_id.vue"',title:'"/pages/map/details/_id.vue"'},'<template>\n    <div class="container">\n        <h3>\n            Map (Google Maps)\n        </h3>\n        <form id="topics_edit" @submit.prevent="update">\n            <div>\n                <GmapMap\n                    ref="gmap"\n                    :center="mapCenter"\n                    :zoom="gmap_zoom"\n                    :map-type-id="gmap_type"\n                    style="width: 500px; height: 300px"\n                >\n                    <GmapMarker\n                        v-if="markPlace"\n                        :position="markPlace"\n                    />\n                </GmapMap>\n            </div>\n        </form>\n    </div>\n</template>\n\n<script>\nexport default {\n    async asyncData({ $axios, route }) {\n        const id = route.params.id;\n        const url = `/rcms-api/3/map/details/${id}`;\n\n        const contents = await $axios\n            .$get(url)\n            .then((response) => {\n                if (response.details) {\n                    return response.details;\n                }\n                return {};\n            })\n            .catch((error) => {\n                console.log(error);\n                return {};\n            });\n        // Set the initial state of Google Maps\n        let mapCenter = { lat: 35.66107078220203, lng: 139.7584319114685 };\n        let markPlace = null;\n        if (contents.gmap?.gmap_x && contents.gmap?.gmap_y) {\n            const lat = Number(contents.gmap.gmap_y);\n            const lng = Number(contents.gmap.gmap_x);\n            mapCenter = { lat, lng };\n            markPlace = { lat, lng };\n        }\n\n        return {\n            mapCenter,\n            markPlace,\n            id,\n            contents,\n            errors: []\n        };\n    },\n    computed: {\n        gmap_zoom() {\n            return Number(this.contents.gmap?.gmap_zoom) || 15;\n        },\n        gmap_type() {\n            return this.contents.gmap?.gmap_type || \'roadmap\';\n        }\n    }\n};\n<\/script>\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Please adjust the URL of the endpoint you are using to your own.")),(0,o.kt)("p",null,"The result of the execution is as follows.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/78356a2a924751626fccc06779951e14.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/78356a2a924751626fccc06779951e14.png",alt:"Image from Gyazo"})),(0,o.kt)("h3",{id:"implementation-of-a-page-updating-google-maps-contents"},"Implementation of a page updating Google Maps contents"),(0,o.kt)("p",null,"Next, let's make it possible to update the location information from the frontend.\nBy using the ",(0,o.kt)("inlineCode",{parentName:"p"},"<GmapAutocomplete>")," component of ",(0,o.kt)("inlineCode",{parentName:"p"},"vue2-google-maps"),", you can use the incremental search function of the Google Maps search field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup",metastring:'title="/pages/map/edit/_id.vue"',title:'"/pages/map/edit/_id.vue"'},'<template>\n    <div class="container">\n        <h3>\n            Map (Google Maps)\n        </h3>\n        <div>\n            The position that is set changes when you click on the map. You can also set the zoom and other states.\n        </div>\n        <form id="topics_edit" @submit.prevent="update">\n            <div>\n                <form onsubmit="return false;">\n                    <GmapAutocomplete\n                        :options="{fields: [\'geometry\']}"\n                        :select-first-on-enter="true"\n                        @place_changed="setPlace"\n                    />\n                    <GmapMap\n                        ref="gmap"\n                        :center="mapCenter"\n                        :zoom="gmap_zoom"\n                        :map-type-id="gmap_type"\n                        style="width: 500px; height: 300px"\n                        @click="mark($event)"\n                        @zoom_changed="gmap_zoom = $event"\n                        @maptypeid_changed="gmap_type = $event"\n                    >\n                        <GmapMarker\n                            v-if="markPlace"\n                            :position="markPlace"\n                        />\n                    </GmapMap>\n                </form>\n            </div>\n            <input\n                type="submit"\n                value="Save"\n            >\n        </form>\n    </div>\n</template>\n\n<script>\nexport default {\n    async asyncData({ $axios, route }) {\n        const id = route.params.id;\n        const url = `/rcms-api/3/map/details/${id}`;\n\n        const contents = await $axios\n            .$get(url)\n            .then((response) => {\n                if (response.details) {\n                    return response.details;\n                }\n                return {};\n            })\n            .catch((error) => {\n                console.log(error);\n                return {};\n            });\n        // Set the initial state of Google Maps\n        let mapCenter = { lat: 35.66107078220203, lng: 139.7584319114685 };\n        let markPlace = null;\n        if (contents.gmap?.gmap_x && contents.gmap?.gmap_y) {\n            const lat = Number(contents.gmap.gmap_y);\n            const lng = Number(contents.gmap.gmap_x);\n            mapCenter = { lat, lng };\n            markPlace = { lat, lng };\n        }\n\n        return {\n            mapCenter,\n            markPlace,\n            id,\n            contents,\n            errors: []\n        };\n    },\n    computed: {\n        gmap_zoom: {\n            get() { return Number(this.contents.gmap?.gmap_zoom) || 15; },\n            set(val) { this.contents.gmap.gmap_zoom = String(val); }\n        },\n        gmap_type: {\n            get() { return this.contents.gmap?.gmap_type || \'roadmap\'; },\n            set(val) { this.contents.gmap.gmap_type = val; }\n        }\n    },\n    methods: {\n        setPlace(place) {\n            if (place.geometry) {\n                this.markPlace = {\n                    lat: place.geometry.location.lat(),\n                    lng: place.geometry.location.lng()\n                };\n                if (place.geometry.viewport) {\n                    this.$refs.gmap.fitBounds(place.geometry.viewport);\n                } else {\n                    this.$refs.gmap.panTo(place.geometry.location);\n                }\n            }\n        },\n        mark(event) {\n            this.markPlace = {\n                lat: event.latLng.lat(),\n                lng: event.latLng.lng()\n            };\n        },\n        async update() {\n            const params = {\n                gmap: {\n                    gmap_x: \'\',\n                    gmap_y: \'\',\n                    gmap_zoom: (this.contents?.gmap?.gmap_zoom || 15),\n                    gmap_type: (this.contents?.gmap?.gmap_type || \'roadmap\')\n                }\n            };\n            if (this.markPlace) {\n                params.gmap.gmap_x = String(this.markPlace.lng);\n                params.gmap.gmap_y = String(this.markPlace.lat);\n            }\n            await this.$axios.post(\n                \'/rcms-api/3/building/update/\' + this.$route.params.id,\n                params\n            ).then((response) => {\n                if (response.data.errors?.length) {\n                    console.log(response.data.errors);\n                }\n                this.errors = [];\n            }).catch((error) => {\n                console.log(error);\n            });\n        }\n    }\n};\n<\/script>\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Please adjust the URL of the endpoint you are using to your own.")),(0,o.kt)("p",null,"The result of execution is as follows.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://t.gyazo.com/teams/diverta/a3e5f55c3d08dfa97cf5799c7fe7eca7.png?width=600","data-zoom-src":"https://t.gyazo.com/teams/diverta/a3e5f55c3d08dfa97cf5799c7fe7eca7.png",alt:"Image from Gyazo"})),(0,o.kt)("p",null,"When you click the save button, the position of the pin and the zoom state will be written to Kuroco's DB."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"In the above sample code, for simplicity, the page is displayed even in a non-logged-in state, but normally you would log in before making updates. Please refer to the following for information on logging in.\n",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorials/integrate-login/"},"Building a login page using Kuroco and Nuxt.js"))),(0,o.kt)("p",null,"With the above steps, you have embedded Google Maps on your website and enabled the ability to change the location information on your website just like in the Kuroco admin panel. By following these procedures, you can provide your website users with a great map experience."))}c.isMDXComponent=!0}}]);