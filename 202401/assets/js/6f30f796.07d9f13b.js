"use strict";(self.webpackChunkkurokuro=self.webpackChunkkurokuro||[]).push([[58605],{3905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>m});var r=s(67294);function a(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){a(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,r,a=function(e,t){if(null==e)return{};var s,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)s=n[r],t.indexOf(s)>=0||(a[s]=e[s]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)s=n[r],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var s=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(s),p=a,m=d["".concat(l,".").concat(p)]||d[p]||h[p]||n;return s?r.createElement(m,o(o({ref:t},u),{},{components:s})):r.createElement(m,o({ref:t},u))}));function m(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=s.length,o=new Array(n);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<n;c++)o[c]=s[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,s)}p.displayName="MDXCreateElement"},39756:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var r=s(87462),a=(s(67294),s(3905));const n={date:new Date("2022-04-08T00:00:00.000Z"),title:"Jamstack and Serverless",description:"A description of how the Jamstack and Serverless ecosystems are interrelated",slug:"jamstack-and-serverless",authors:"diverta",hide_table_of_contents:!1},o=void 0,i={permalink:"/blog/jamstack-and-serverless",source:"@site/blog/jamstack-and-serverless.md",title:"Jamstack and Serverless",description:"A description of how the Jamstack and Serverless ecosystems are interrelated",date:"2022-04-08T00:00:00.000Z",formattedDate:"April 8, 2022",tags:[],readingTime:4.425,hasTruncateMarker:!0,authors:[{name:"Diverta",title:"Creator of Kuroco service",url:"https://www.diverta.co.jp",imageURL:"https://github.com/diverta.png",key:"diverta"}],frontMatter:{date:"2022-04-08T00:00:00.000Z",title:"Jamstack and Serverless",description:"A description of how the Jamstack and Serverless ecosystems are interrelated",slug:"jamstack-and-serverless",authors:"diverta",hide_table_of_contents:!1},prevItem:{title:"Headless CMS",permalink:"/blog/headless-cms"},nextItem:{title:"Jamstack for Enterprise",permalink:"/blog/jamstack-for-enterprise"}},l={authorsImageUrls:[void 0]},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Examples of Serverless Functions Used in Jamstack",id:"examples-of-serverless-functions-used-in-jamstack",level:2},{value:"Is Jamstack/Serverless Right for My Business?",id:"is-jamstackserverless-right-for-my-business",level:2},{value:"Combining Serverless/Jamstack Projects with a Headless CMS",id:"combining-serverlessjamstack-projects-with-a-headless-cms",level:2}],u={toc:c},d="wrapper";function h(e){let{components:t,...s}=e;return(0,a.kt)(d,(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A description of how the Jamstack and Serverless ecosystems are interrelated"),(0,a.kt)("img",{src:"/files/user/img/blog/Kuroco_Tap_Into_Power_Serverless_Functions.svg",alt:"serverless functions",width:"300"}),(0,a.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Overview"),(0,a.kt)("li",{parentName:"ul"},"How it Works"),(0,a.kt)("li",{parentName:"ul"},"Examples of Serverless Functions Used in Jamstack")),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In an era of internet buzzwords, it can be difficult to keep track of the latest technology trends and how they compare.  In recent years, two of the most popular new technologies to emerge have been the Jamstack, and Serverless architecture."),(0,a.kt)("p",null,"The Jamstack is a next-generation frontend focused web development stack.  The name stands for: JavaScript, APIs, and Markup. Its goal is to make websites and apps easier and cheaper to host and serve to clients, while simplifying the overall development process."),(0,a.kt)("p",null,"Serverless architecture is closely related to the Jamstack, but is a separate and more expansive ecosystem unto itself.  As the name implies, 'serverless' architecture essentially replaces the need for developers to manage a complicated backend by themselves.  In reality, servers are of course still being used behind the scenes, but the backend cloud services they provide allow developers to skip having to setup or maintain their own servers."),(0,a.kt)("h2",{id:"how-it-works"},"How it Works"),(0,a.kt)("p",null,"Typically, when a front-end application is built, developers will need to connect it to a backend system (usually built in Ruby-on-Rails, PHP, Node.js, or other backend languages). This backend will serve up functions needed to power the frontend, particularly when fetching data and for authorizing/authenticating requests.  "),(0,a.kt)("p",null,"In serverless architecture, these functions are handled automatically by the cloud service provider.  The system resources are already set up and available, and can auto-scale with demand from the frontend.  One of the main appeals of using serverless functions in this way, is that sudden spikes in traffic to your website will automatically be provision for by the serverless infrastructure.  Moreover, you will only pay for the number of functions that are called, without having to pay for constant server uptime."),(0,a.kt)("p",null,"This functionality is key for running effective Jamstack projects.  Frontend developers can focus on building out their application's UI, and the backend functionality is taken care of for them by the serverless systems."),(0,a.kt)("p",null,"One issue to be aware of is that on some cloud platforms unused serverless functions may be set to \u2018idle\u2019 and require a \u2018cold start\u2019 when used again, which can result in slightly slower reaction speeds. This issue does not occur if the application and its functions are being used regularly."),(0,a.kt)("h2",{id:"examples-of-serverless-functions-used-in-jamstack"},"Examples of Serverless Functions Used in Jamstack"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Making API calls to fetch data server-side,")," before serving the static HTML files to the browser. While Jamstack is often associated with serving static sites from a CDN, it is possible to add dynamic functionality using serverless functions.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Handling authorization.")," While it is possible to store JSON web tokens (JWTs) in the browser, it is still necessary to generate the bearer tokens server-side (they cannot be stored in the browser due to obvious security vulnerabilities). Rather than building out your own backend server for this, it can be handled by the host using serverless functions.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Contact Forms or Email Notifications.")," Handling forms (ex. a user enters their name, email, and message, and submits it - which would cause that information to be emailed to you) directly on a static site can require a lot of JavaScript overhead that could make the page bulky and more expensive to load in the user\u2019s browser. Instead, that functionality can be put into a serverless function, run on the host in the serverless backend, and triggered by the user\u2019s action on the front-end."))),(0,a.kt)("h2",{id:"is-jamstackserverless-right-for-my-business"},"Is Jamstack/Serverless Right for My Business?"),(0,a.kt)("p",null,"Both of these technologies are well-established, and used by the largest enterprises in the world.  However, whether or not they are suitable will depend on the requirements of a given project."),(0,a.kt)("p",null,"Serverless architecture is widely used, with platforms like AWS (Lambda functions) powering much of the Internet today.  Companies that already have large amounts of internal server resources provisioned may not need to use such services; but the ease of use and low cost of using serverless functions makes it an attractive option, particularly for new projects or when building out a proof-of-concept."),(0,a.kt)("p",null,"Jamstack has more limited use cases, but has similar trade-offs.  When building out complex applications with a lot of dynamic functionality, it may be better to lean more heavily on server-side functionality.  Static pages rely more on the browser run-time environment, which is not always ideal.  For fast, highly performant websites serving static content, Jamstack is an excellent choice."),(0,a.kt)("h2",{id:"combining-serverlessjamstack-projects-with-a-headless-cms"},"Combining Serverless/Jamstack Projects with a Headless CMS"),(0,a.kt)("p",null,"A good headless CMS will come with a lot of backend functionality built in, including access to serverless functions, and static hosting for Jamstack sites.  While this also be achieved without a CMS, it usually makes sense to have an interface for content creators, marketers, and other non-technical stakeholders to make use of."),(0,a.kt)("p",null,"Kuroco, the enterprise headless CMS, was built with serverless architecture in mind, and can easily host Jamstack websites on our CDN.  If you're looking for an enterprise grade solution to host your serverless and/or Jamstack projects, we hope you will give Kuroco a try!"),(0,a.kt)("p",null,"You can get started today and test it out for free, or feel free to ",(0,a.kt)("a",{parentName:"p",href:"https://hisashihasebe.github.io/document_archive_public/202401/docs/about/support/"},"reach out to our customer support team")," if you have any questions!"))}h.isMDXComponent=!0}}]);